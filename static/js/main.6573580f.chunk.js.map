{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CardList","props","profiles","map","profile","key","id","Card","this","className","src","avatar_url","alt","style","backgroundColor","name","company","React","Component","Form","state","username","handleSubmit","event","a","preventDefault","axios","get","resp","onSubmit","data","setState","placeholder","value","onChange","target","required","App","addNewProfile","profileData","prevState","console","log","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wUAKMA,EAAW,SAACC,GAAD,OACf,6BACGA,EAAMC,SAASC,KAAI,SAAAC,GAAO,OAAI,kBAAC,EAAD,eAAMC,IAAKD,EAAQE,IAAQF,SAIxDG,E,uKAEF,IAAMH,EAAUI,KAAKP,MACpB,OACC,yBAAKQ,UAAU,kBACb,yBAAKC,IAAKN,EAAQO,WAAYC,IAAI,WAAWC,MAAO,CAACC,gBAAiB,UACtE,yBAAKL,UAAU,QACb,yBAAKA,UAAU,QAAQL,EAAQW,KAA/B,KACA,yBAAKN,UAAU,WAAWL,EAAQY,QAAlC,W,GARSC,IAAMC,WAenBC,E,4MACJC,MAAQ,CAACC,SAAU,I,EACnBC,a,uCAAe,WAAOC,GAAP,eAAAC,EAAA,6DACbD,EAAME,iBADO,SAEMC,IAAMC,IAAN,uCAA0C,EAAKP,MAAMC,WAF3D,OAEPO,EAFO,OAGb,EAAK3B,MAAM4B,SAASD,EAAKE,MACzB,EAAKC,SAAS,CAACV,SAAU,KAJZ,2C,6GAMN,IAAD,OACN,OACE,0BAAMQ,SAAUrB,KAAKc,cACnB,2BACAU,YAAY,kBACZC,MAASzB,KAAKY,MAAMC,SACpBa,SAAU,SAAAX,GAAK,OAAG,EAAKQ,SAAS,CAACV,SAAUE,EAAMY,OAAOF,SACxDG,UAAQ,IACR,iD,GAhBWnB,IAAMC,WA8CVmB,E,kDAvBb,WAAYpC,GAAO,IAAD,8BAChB,cAAMA,IAKRqC,cAAgB,SAACC,GACf,EAAKR,UAAS,SAAAS,GAAS,MAAK,CAC1BpC,QAAQ,GAAD,mBAAMoC,EAAUpC,SAAhB,CAAyBmC,QAElCE,QAAQC,IAAI,MAAOH,IARnB,EAAKnB,MAAQ,CACXhB,QAAS,IAHK,E,qDAalB,OACA,6BACE,yBAAKK,UAAU,UAAUD,KAAKP,MAAM0C,OAClC,kBAAC,EAAD,CAAMd,SAAUrB,KAAK8B,gBACrB,kBAAC,EAAD,CAAUpC,SAAYM,KAAKY,MAAMhB,e,GAlBrBa,IAAMC,WCpCJ0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKR,MAAM,0BAEbS,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.6573580f.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nconst CardList = (props) =>(\n  <div>\n    {props.profiles.map(profile => <Card key={profile.id} {...profile} />)}\n  </div>\n);\n\nclass Card extends React.Component{\n  render(){\n    const profile = this.props;\n     return (\n      <div className=\"github-profile\"> \n        <img src={profile.avatar_url} alt=\"prof-pix\" style={{backgroundColor: \"grey\"}}/>\n        <div className=\"info\">\n          <div className=\"name\">{profile.name} </div>\n          <div className=\"company\">{profile.company} </div>\n        </div>\n      </div>\n     );\n  }\n};\n\nclass Form extends React.Component{\n  state = {username: \"\"}\n  handleSubmit = async (event) =>{\n    event.preventDefault();\n    const resp = await axios.get(`https://api.github.com/users/${this.state.username}`);\n    this.props.onSubmit(resp.data);\n    this.setState({username: \"\"})\n  };\n  render(){\n    return(\n      <form onSubmit={this.handleSubmit}>\n        <input \n        placeholder=\"Github username\" \n        value = {this.state.username}\n        onChange={event=> this.setState({username: event.target.value})}\n        required />\n        <button>Add card</button>\n      </form>\n    )\n  }\n};\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      profile: [],\n    };\n  };\n  addNewProfile = (profileData) =>{\n    this.setState(prevState => ({\n      profile: [...prevState.profile, profileData]\n    }))\n    console.log('App', profileData);\n  };  \n  render () {\n  return (\n  <div>\n    <div className=\"header\">{this.props.title}</div>\n      <Form onSubmit={this.addNewProfile} />\n      <CardList profiles = {this.state.profile}/>\n  </div>\n    )\n  }\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App title=\"The Github Cards App\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}